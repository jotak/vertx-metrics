/*
 * Copyright (c) 2011-2017 The original author or authors
 * ------------------------------------------------------
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Apache License v2.0 which accompanies this distribution.
 *
 *     The Eclipse Public License is available at
 *     http://www.eclipse.org/legal/epl-v10.html
 *
 *     The Apache License v2.0 is available at
 *     http://www.opensource.org/licenses/apache2.0.php
 *
 * You may elect to redistribute this code under either of these licenses.
 */

/**
 * = Prometheus Metrics
 *
 * This project is an implementation of the Vert.x Metrics Service Provider Interface (SPI): metrics built from Vert.x
 * events are available for https://prometheus.io/[Prometheus] scraper.
 *
 * == Features
 *
 * * Vert.x core tools monitoring: TCP/HTTP client and servers, {@link io.vertx.core.datagram.DatagramSocket},
 * {@link io.vertx.core.eventbus.EventBus} and handlers
 * * User defined metrics can be added to the shared registry (using Prometheus https://github.com/prometheus/client_java[simple Java client])
 *
 * == Prerequisites
 *
 * Follow the https://prometheus.io/docs/prometheus/latest/getting_started/[instructions to get Prometheus up and running].
 *
 * == Getting started
 *
 * The _${maven.artifactId}_ module must be present in the classpath.
 *
 * Maven users should add this to their project POM file:
 *
 * [source,xml,subs="+attributes"]
 * ----
 * <dependency>
 *   <groupId>${maven.groupId}</groupId>
 *   <artifactId>${maven.artifactId}</artifactId>
 *   <version>${maven.version}</version>
 * </dependency>
 * ----
 *
 * And Gradle users, to their build file:
 *
 * [source,groovy,subs="+attributes"]
 * ----
 * compile '${maven.groupId}:${maven.artifactId}:${maven.version}'
 * ----
 *
 * Vert.x does not enable SPI implementations by default. You must enable metric collection in the Vert.x options:
 *
 * [source,$lang]
 * ----
 * {@link examples.MetricsExamples#setup()}
 * ----
 *
 * == Configuration
 *
 * === Using an embedded HTTP server for exposing endpoints
 *
 * [source,$lang]
 * ----
 * {@link examples.MetricsExamples#setupEmbeddedServerWithOptions()}
 * ----
 *
 * === Binding an existing Vert.X router
 *
 * [source,$lang]
 * ----
 * {@link examples.MetricsExamples#setupBoundRouter()}
 * ----
 *
 * Please refer to {@link io.vertx.ext.prometheus.VertxPrometheusOptions} for an exhaustive list of options.
 *
 * == Vert.x core tools metrics
 *
 * This section lists all the metrics generated by monitoring the Vert.x core tools.
 *
 * === Net Client
 *
 * [cols="15,50,35", options="header"]
 * |===
 * |Metric type
 * |Metric name
 * |Description
 *
 * |Gauge
 * |{@code vertx_net_client_connections{local=<local address>,remote=<remote address>}}
 * |Number of connections to the remote host currently opened.
 *
 * |Histogram
 * |{@code vertx_net_client_bytes_received{local=<local address>,remote=<remote address>}}
 * |Number of bytes received from the remote host.
 *
 * |Histogram
 * |{@code vertx_net_client_bytes_sent{local=<local address>,remote=<remote address>}}
 * |Number of bytes sent to the remote host.
 *
 * |Counter
 * |{@code vertx_net_client_errors{local=<local address>,remote=<remote address>,class=<class>}}
 * |Number of errors.
 *
 * |===
 *
 * === HTTP Client
 *
 * [cols="15,50,35", options="header"]
 * |===
 * |Metric type
 * |Metric name
 * |Description
 *
 * |Gauge
 * |{@code vertx_http_client_connections{local=<local address>,remote=<remote address>}}
 * |Number of connections to the remote host currently opened.
 *
 * |Histogram
 * |{@code vertx_http_client_bytes_received{local=<local address>,remote=<remote address>}}
 * |Number of bytes received from the remote host.
 *
 * |Histogram
 * |{@code vertx_http_client_bytes_sent{local=<local address>,remote=<remote address>}}
 * |Number of bytes sent to the remote host.
 *
 * |Counter
 * |{@code vertx_http_client_errors{local=<local address>,remote=<remote address>,class=<class>}}
 * |Number of errors.
 *
 * |Gauge
 * |{@code vertx_http_client_requests{local=<local address>,remote=<remote address>}}
 * |Number of requests waiting for a response.
 *
 * |Counter
 * |{@code vertx_http_client_request_count{local=<local address>,remote=<remote address>,method=<http method>}}
 * |Number of requests sent.
 *
 * |Histogram
 * |{@code vertx_http_client_response_time{local=<local address>,remote=<remote address>}}
 * |Response time.
 *
 * |Counter
 * |{@code vertx_http_client_response_count{local=<local address>,remote=<remote address>,code=<response code>}}
 * |Number of received responses.
 *
 * |Gauge
 * |{@code vertx_http_client_ws_connections{local=<local address>,remote=<remote address>}}
 * |Number of websockets currently opened.
 *
 * |===
 *
 * === Datagram socket
 *
 * [cols="15,50,35", options="header"]
 * |===
 * |Metric type
 * |Metric name
 * |Description
 *
 * |Histogram
 * |{@code vertx_datagram_bytes_received{local=<local>,remote=<remote>}}
 * |Total number of bytes received on the {@code <host>:<port>} listening address.
 *
 * |Histogram
 * |{@code vertx_datagram_bytes_sent{remote=<remote>}}
 * |Total number of bytes sent to the remote host.
 *
 * |Counter
 * |{@code vertx_datagram_errors{class=<class>}}
 * |Total number of errors.
 *
 * |===
 *
 * === Net Server
 *
 * Note: all metrics here may receive a "remote" label, but it is deactivated by default. See {@link io.vertx.ext.prometheus.VertxPrometheusOptions#setEnableRemoteLabelForServers(boolean)}
 *
 * [cols="15,50,35", options="header"]
 * |===
 * |Metric type
 * |Metric name
 * |Description
 *
 * |Gauge
 * |{@code vertx_net_server_connections{local=<local address>}}
 * |Number of opened connections to the Net Server.
 *
 * |Histogram
 * |{@code vertx_net_server_bytes_received{local=<local address>}}
 * |Number of bytes received by the Net Server.
 *
 * |Histogram
 * |{@code vertx_net_server_bytes_sent{local=<local address>}}
 * |Number of bytes sent by the Net Server.
 *
 * |Counter
 * |{@code vertx_net_server_errors{local=<local address>,class=<class>}}
 * |Number of errors.
 *
 * |===
 *
 * === HTTP Server
 *
 * Note: all metrics here may receive a "remote" label, but it is deactivated by default. See {@link io.vertx.ext.prometheus.VertxPrometheusOptions#setEnableRemoteLabelForServers(boolean)}
 *
 * [cols="15,50,35", options="header"]
 * |===
 * |Metric type
 * |Metric name
 * |Description
 *
 * |Gauge
 * |{@code vertx_http_server_connections{local=<local address>}}
 * |Number of opened connections to the HTTP Server.
 *
 * |Histogram
 * |{@code vertx_http_server_bytes_received{local=<local address>}}
 * |Number of bytes received by the HTTP Server.
 *
 * |Histogram
 * |{@code vertx_http_server_bytes_sent{local=<local address>}}
 * |Number of bytes sent by the HTTP Server.
 *
 * |Counter
 * |{@code vertx_http_server_errors{local=<local address>,class=<class>}}
 * |Number of errors.
 *
 * |Gauge
 * |{@code vertx_http_server_requests{local=<local address>}}
 * |Number of requests being processed.
 *
 * |Counter
 * |{@code vertx_http_server_request_count{local=<local address>,method=<http method>,code=<response code>}}
 * |Number of processed requests.
 *
 * |Counter
 * |{@code vertx_http_server_request_reset_count{local=<local address>}}
 * |Number of requests reset.
 *
 * |Histogram
 * |{@code vertx_http_server_processing_time{local=<local address>}}
 * |Request processing time.
 *
 * |Gauge
 * |{@code vertx_http_client_ws_connections{local=<local address>}}
 * |Number of websockets currently opened.
 *
 * |===
 *
 * === Event Bus
 *
 * [cols="15,50,35", options="header"]
 * |===
 * |Metric type
 * |Metric name
 * |Description
 *
 * |Gauge
 * |{@code vertx_eventbus_handlers{address=<address>}}
 * |Number of event bus handlers in use.
 *
 * |Counter
 * |{@code vertx_eventbus_errors{address=<address>,class=<class>}}
 * |Number of errors.
 *
 * |Histogram
 * |{@code vertx_eventbus_bytes_written{address=<address>}}
 * |Total number of bytes sent while sending messages to event bus cluster peers.
 *
 * |Histogram
 * |{@code vertx_eventbus_bytes_read{address=<address>}}
 * |Total number of bytes received while reading messages from event bus cluster peers.
 *
 * |Gauge
 * |{@code vertx_eventbus_pending{address=<address>,side=<local/remote>}}
 * |Number of messages not processed yet. One message published will count for {@code N} pending if {@code N} handlers
 * are registered to the corresponding address.
 *
 * |Counter
 * |{@code vertx_eventbus_published{address=<address>,side=<local/remote>}}
 * |Number of messages published (publish / subscribe).
 *
 * |Counter
 * |{@code vertx_eventbus_sent{address=<address>,side=<local/remote>}}
 * |Number of messages sent (point-to-point).
 *
 * |Counter
 * |{@code vertx_eventbus_received{address=<address>,side=<local/remote>}}
 * |Number of messages received.
 *
 * |Counter
 * |{@code vertx_eventbus_delivered{address=<address>,side=<local/remote>}}
 * |Number of messages delivered to handlers.
 *
 * |Counter
 * |{@code vertx_eventbus_reply_failures{address=<address>,failure=<failure name>}}
 * |Number of message reply failures.
 *
 * |Histogram
 * |{@code vertx_eventbus_processing_time{address=<address>}}
 * |Processing time for handlers listening to the {@code address}.
 *
 * |===
 *
 * == Vert.x pool metrics
 *
 * This section lists all the metrics generated by monitoring Vert.x pools.
 *
 * There are two types currently supported:
 *
 * * _worker_ (see {@link io.vertx.core.WorkerExecutor})
 * * _datasource_ (created with Vert.x JDBC client)
 *
 * NOTE: Vert.x creates two worker pools upfront, _vert.x-worker-thread_ and _vert.x-internal-blocking_.
 *
 * [cols="15,50,35", options="header"]
 * |===
 * |Metric type
 * |Metric name
 * |Description
 *
 * |Histogram
 * |{@code vertx_pool_queue_delay{pool_type=<type>,pool_name=<name>}}
 * |Time waiting for a resource (queue time).
 *
 * |Gauge
 * |{@code vertx_pool_queue_size{pool_type=<type>,pool_name=<name>}}
 * |Number of elements waiting for a resource.
 *
 * |Histogram
 * |{@code vertx_pool_usage{pool_type=<type>,pool_name=<name>}}
 * |Time using a resource (i.e. processing time for worker pools).
 *
 * |Gauge
 * |{@code vertx_pool_in_use{pool_type=<type>,pool_name=<name>}}
 * |Number of resources used.
 *
 * |Counter
 * |{@code vertx_pool_completed{pool_type=<type>,pool_name=<name>}}
 * |Number of elements done with the resource (i.e. total number of tasks executed for worker pools).
 *
 * |Gauge
 * |{@code vertx_pool_ratio{pool_type=<type>,pool_name=<name>,max_pool_size=<size>}}
 * |Pool usage ratio, only present if maximum pool size could be determined.
 *
 * |===
 *
 * == Verticle metrics
 *
 * [cols="15,50,35", options="header"]
 * |===
 * |Metric type
 * |Metric name
 * |Description
 *
 * |Gauge
 * |{@code vertx_verticle{name=<name>}}
 * |Number of verticle instances deployed.
 *
 * |===
 *
 */
@ModuleGen(name = "vertx-prometheus", groupPackage = "io.vertx")
@Document(fileName = "index.adoc")
package io.vertx.ext.prometheus;

import io.vertx.codegen.annotations.ModuleGen;
import io.vertx.docgen.Document;
